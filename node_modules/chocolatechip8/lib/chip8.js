var fs = require('fs');

var Chip8Emulator = function()
{
	this.memory = new Buffer(3584); //Address space starts at 200h
	this.registers = new Buffer(16); //V0 through VF
	this.stack = new Buffer(48); //Should nest at least 12 address (used for subroutines)
	this.delay_timer = new Buffer(1); //ticks down at 60hz
	this.sound_timer = new Buffer(1); //ticks down at 60hz, beeps until zero
	this.address_register = new Buffer(2);
};

Chip8Emulator.prototype =
{
	//Zeroes out ROM but not registers
	clearROM: function()
	{
		for (var index = 0; index < 3584; index++)
		{
			this.memory[index] = 0;
		}
	},
	
	//Clear registers
	resetRegisters: function()
	{
		//clear the big 16
		for (var register = 0; register < 16; register++)
		{
			this.registers[register] = 0;
		}
		
		//clear address register
		this.address_register[0] = 0;
		this.address_register[1] = 0;
		
		//clear timers
		this.delay_timer[0] = 0;
		this.sound_timer[0] = 0;
	},
	
	//Clear the stack
	clearStack: function()
	{
		//assume size 48 until otherwise expanded
		for (var index = 0; index < 48; index++)
		{
			this.stack[index] = 0;
		}
	},
	
	//Load a ROM into memory
	loadROM: function(filename)
	{
		//Get the machine ready for a fresh ROM
		this.clearROM();
		this.clearStack();
		this.resetRegisters();

		var data = fs.readFileSync(filename)

		console.log("Data Size: " + data.length);

		for (var index = 0; index < data.length; index++)
		{
			this.memory[index] = data[index];
		}		
	},
	
	decodeOpcode: function(opcode)
	{	
		switch(opcode & 0xF000)
		{
			case 0x0000:
				switch(opcode & 0x0FFF)
				{
					case 0x00E0:
						break;
					case 0x00EE:
						break;
					default:
						break;
				}
				break;
			case 0x1000:
				break;
			case 0x2000:
				break;
			case 0x3000:
				break;
			case 0x4000:
				break;
			case 0x5000:
				break;
			case 0x6000:
				break;
			case 0x7000:
				break;
			case 0x8000:
				switch(opcode & 0x000F)
				{
					case 0x0001:
						break;
					case 0x0002:
						break;
					case 0x0003:
						break;
					case 0x0004:
						break;
					case 0x0005:
						break;
					case 0x0006:
						break;
					case 0x0007:
						break;
					case 0x000E:
						break;
				}
				break;
			case 0x9000:
				break;
			case 0xA000:
				break;
			case 0xB000:
				break;
			case 0xC000:
				break;
			case 0xD000:
				break;
			case 0xE000:
				switch(opcode & 0x00FF)
				{
					case 0x009E:
						break;
					case 0x00A1:
						break;
				}
				break;
			case 0xF000:
				switch(opcode & 0x00FF)
				{
					case 0x0007:
						break;
					case 0x000A:
						break;
					case 0x0015:
						break;
					case 0x0018:
						break;
					case 0x001E:
						break;
					case 0x0029:
						break;
					case 0x0033:
						break;
					case 0x0055:
						break;
					case 0x0065:
						break;
				}
				break;
		}
	},
	
	executeROM: function()
	{
		for (var index = 0; index < data.length; index = index + 2)
		{
			decodeOpcode(this.memory[index]);
		}
	}
	
	/**************************************
	Begin Opcodes
	***************************************/
};


module.exports.Chip8Emulator = Chip8Emulator;